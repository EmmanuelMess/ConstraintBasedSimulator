statement ::= Îµ
            | <point-definition> eol
            | <static-qualifier> eol
            | <graphical-statement> eol

point-definition ::= <identifier> = (<decimal>, <decimal>)

static-qualifier ::= static <identifier>

constraint ::= constraint <constraint-type> <identifier> <identifier> <constraint-operator> <decimal>
             | constraint <constraint-type> <identifier> <identifier> fun <function>

constraint-type ::= distance
                  | force

constraint-operator ::= == 
                      | <
                      | >
                      | >=
                      | <=
                       
function ::= (<function-parameters>) -> <function-body>

function-parameters ::= <property-identifier>
                      | <function-parameters>, <property-identifier>

property-identifier ::= distance | t

function-body ::= <function-body> <binary-operator> <function-body>
                | <unary-operator> <function-body>
                | ( <function-body> )
                | <property-identifier>
                | <decimal>

unary-operator ::= -
                 | sin | cos | tan
                 | asin | acos | atan
                 | sinh | cosh | tanh
                 | ln | log | exp | sqrt

binary-operator ::= + | - | * | / | ^

graphical-statement ::= show bar <identifier> <indentifier>
                      | show circle <identifier> radius <decimal>

